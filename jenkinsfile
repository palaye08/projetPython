pipeline {
    agent any
    
    environment {
        // Variables d'environnement
        DOCKER_HUB_REPO = 'palaye769/projetpython'
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        RENDER_DEPLOY_HOOK = credentials('render-deploy-hook')
        GIT_REPO = 'https://github.com/palaye08/projetPython.git'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ R√©cup√©ration du code source...'
                checkout scm
                
                script {
                    // R√©cup√©rer les informations du commit
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    
                    env.GIT_BRANCH_NAME = sh(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()
                }
                
                echo "Branch: ${env.GIT_BRANCH_NAME}"
                echo "Commit: ${env.GIT_COMMIT_SHORT}"
            }
        }
        
        stage('Environment Setup') {
            steps {
                echo '‚öôÔ∏è Configuration de l\'environnement...'
                sh '''
                    echo "Python version:"
                    python3 --version
                    
                    echo "Docker version:"
                    docker --version
                    
                    echo "Current directory:"
                    pwd
                    
                    echo "Files in directory:"
                    ls -la
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installation des d√©pendances...'
                sh '''
                    # Cr√©er un environnement virtuel
                    python3 -m venv venv
                    
                    # Activer l'environnement virtuel
                    . venv/bin/activate
                    
                    # Mettre √† jour pip
                    pip install --upgrade pip
                    
                    # Installer les d√©pendances
                    if [ -f requirements.txt ]; then
                        pip install -r requirements.txt
                        echo "‚úÖ D√©pendances install√©es"
                    else
                        echo "‚ö†Ô∏è requirements.txt non trouv√©"
                        exit 1
                    fi
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'üß™ Ex√©cution des tests...'
                sh '''
                    # Activer l'environnement virtuel
                    . venv/bin/activate
                    
                    # Tests basiques
                    echo "Test: Import des modules principaux"
                    python3 -c "
import sys
sys.path.append('.')

try:
    # Test des imports principaux
    print('Test imports...')
    
    # Tests conditionnels bas√©s sur la disponibilit√© des modules
    modules_to_test = [
        ('pandas', 'import pandas as pd'),
        ('flask', 'from flask import Flask')
    ]
    
    for module_name, import_cmd in modules_to_test:
        try:
            exec(import_cmd)
            print(f'‚úÖ {module_name} import√© avec succ√®s')
        except ImportError as e:
            print(f'‚ö†Ô∏è {module_name} non disponible: {e}')
    
    print('‚úÖ Tests d\\'import termin√©s')
    
except Exception as e:
    print(f'‚ùå Erreur lors des tests: {e}')
    sys.exit(1)
"
                '''
            }
            
            post {
                always {
                    echo 'üìä Archivage des r√©sultats de tests...'
                    // Archiver les logs de tests si ils existent
                    archiveArtifacts artifacts: 'test-results/**/*', allowEmptyArchive: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construction de l\'image Docker...'
                script {
                    // Construire l'image avec plusieurs tags
                    def imageName = "${env.DOCKER_HUB_REPO}"
                    def imageTag = "${env.GIT_COMMIT_SHORT}"
                    
                    sh """
                        # Build de l'image Docker
                        docker build -t ${imageName}:${imageTag} .
                        docker tag ${imageName}:${imageTag} ${imageName}:latest
                        
                        # V√©rifier que l'image a √©t√© cr√©√©e
                        docker images | grep ${env.DOCKER_HUB_REPO}
                    """
                    
                    env.DOCKER_IMAGE_TAG = imageTag
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'üîê Scan de s√©curit√© de l\'image Docker...'
                script {
                    try {
                        sh """
                            # Scan basique de l'image (si trivy est install√©)
                            if command -v trivy &> /dev/null; then
                                echo "Scan avec Trivy..."
                                trivy image --exit-code 0 --severity HIGH,CRITICAL ${env.DOCKER_HUB_REPO}:${env.DOCKER_IMAGE_TAG}
                            else
                                echo "‚ö†Ô∏è Trivy non install√©, scan de s√©curit√© ignor√©"
                            fi
                            
                            # V√©rification basique de l'image
                            docker inspect ${env.DOCKER_HUB_REPO}:${env.DOCKER_IMAGE_TAG}
                        """
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Scan de s√©curit√© √©chou√©: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            when {
                anyOf {
                    branch 'master'
                    branch 'main'
                }
            }
            steps {
                echo 'üì§ Push vers Docker Hub...'
                script {
                    docker.withRegistry('https://registry-1.docker.io/v2/', 'docker-hub-credentials') {
                        sh """
                            # Push des images
                            docker push ${env.DOCKER_HUB_REPO}:${env.DOCKER_IMAGE_TAG}
                            docker push ${env.DOCKER_HUB_REPO}:latest
                        """
                    }
                }
                
                echo '‚úÖ Images pouss√©es vers Docker Hub avec succ√®s'
            }
        }
        
        stage('Deploy to Render') {
            when {
                anyOf {
                    branch 'master'
                    branch 'main'
                }
            }
            steps {
                echo 'üöÄ D√©ploiement sur Render...'
                script {
                    try {
                        sh """
                            # D√©clencher le d√©ploiement sur Render
                            curl -X POST "${env.RENDER_DEPLOY_HOOK}" \
                                -H "Content-Type: application/json" \
                                -d '{"ref": "${env.GIT_BRANCH_NAME}", "commit": "${env.GIT_COMMIT_SHORT}"}'
                        """
                        
                        echo '‚úÖ D√©ploiement Render d√©clench√© avec succ√®s'
                        
                        // Attendre un peu pour que le d√©ploiement commence
                        sleep(30)
                        
                    } catch (Exception e) {
                        echo "‚ùå Erreur lors du d√©ploiement: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("D√©ploiement √©chou√©")
                    }
                }
            }
        }
        
        stage('Health Check') {
            when {
                anyOf {
                    branch 'master'
                    branch 'main'
                }
            }
            steps {
                echo 'ü©∫ V√©rification de l\'√©tat de l\'application...'
                script {
                    try {
                        // Attendre que l'application soit d√©ploy√©e
                        echo "Attente du d√©ploiement (2 minutes)..."
                        sleep(120)
                        
                        // URL de ton app Render (√† adapter)
                        def appUrl = "https://projetpython.onrender.com"  // Remplace par ton URL
                        
                        sh """
                            # Test de health check
                            echo "Test de l'endpoint /health..."
                            
                            # Retry logic pour le health check
                            for i in {1..5}; do
                                if curl -f -s "${appUrl}/health"; then
                                    echo "‚úÖ Application accessible"
                                    break
                                else
                                    echo "‚è≥ Tentative \$i/5 - En attente..."
                                    sleep 30
                                fi
                                
                                if [ \$i -eq 5 ]; then
                                    echo "‚ùå Application non accessible apr√®s 5 tentatives"
                                    exit 1
                                fi
                            done
                        """
                        
                        echo '‚úÖ Health check r√©ussi'
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Health check √©chou√©: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage...'
            sh '''
                # Nettoyer les images Docker locales pour √©conomiser l'espace
                docker system prune -f
                
                # Supprimer l'environnement virtuel
                rm -rf venv
            '''
        }
        
        success {
            echo 'üéâ Pipeline ex√©cut√© avec succ√®s!'
            
            // Notifications (optionnel)
            script {
                try {
                    // Slack notification (si configur√©)
                    // slackSend(
                    //     channel: '#deployments',
                    //     color: 'good',
                    //     message: "‚úÖ D√©ploiement r√©ussi - Branch: ${env.GIT_BRANCH_NAME}, Commit: ${env.GIT_COMMIT_SHORT}"
                    // )
                    
                    echo "Notification de succ√®s envoy√©e"
                } catch (Exception e) {
                    echo "Notification √©chou√©e: ${e.getMessage()}"
                }
            }
        }
        
        failure {
            echo '‚ùå Pipeline √©chou√©!'
            
            // Notifications d'√©chec
            script {
                try {
                    // slackSend(
                    //     channel: '#deployments',
                    //     color: 'danger',
                    //     message: "‚ùå D√©ploiement √©chou√© - Branch: ${env.GIT_BRANCH_NAME}, Commit: ${env.GIT_COMMIT_SHORT}"
                    // )
                    
                    echo "Notification d'√©chec envoy√©e"
                } catch (Exception e) {
                    echo "Notification √©chou√©e: ${e.getMessage()}"
                }
            }
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline instable (certains tests ont √©chou√©)'
        }
    }
}